/* autogenerated by Processing revision 1286 on 2022-11-05 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;
import processing.sound.*;
import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Game extends PApplet {


static Level level;
static Level[] levels;
static int levelNumber = 0;
static int windowNumber = 0;
static int score = 0;

Button[] buttons;

 public void setup() {
    frameRate(60);
    /* size commented out by preprocessor */;
    // fullScreen();
    createLevels();
    createButtons();
    loadImages();
    loadAudio();
    windowNumber = 0;
    keyValid[0] = true;
    keyValid[1] = true;
    keyValid[2] = true;
}

 public void draw() {
    background(0,0,0);
    //Will draw the game according to the variable windowNumber 
    switch(windowNumber) {
        case 0 : // Main Menu
            menu();
            break;
        case 1 : // Levels
            level = levels[levelNumber];buttons[0] = new Button(width / 2 - resizeX(800), height - resizeY(250), resizeX(400), resizeY(80), "Main Menu");
            levels[levelNumber].plays();
            break;
        case 2 : // Level Selector
            chooseLevel();
            break;
        case 3 : // Instructions Screen
            help();
            break;
        case 4:
            levelCompleted(); // Results Screen
            break;
    }
    //Needs to be called on the end of this function  
    disableKeys();
    
    menuMusicSystem();
    //text(frameRate, width/2, height/2);
}


// Controls (Multiple Controls)  
//I made this controls system, so it gives you multiple controls, example: you can press W and D at the same time to move the player in the diagonal
static boolean[] keys = new boolean[5];
static boolean[] keyValid = new boolean[3];

 public void keyPressed() {    
    if (key == 'a' && keyValid[0] == true) {
        keys[0] = true;
        keyValid[0] = false;
    }
    if (key == 's' && keyValid[1] == true) {
        keys[1] = true;
        keyValid[1] = false;
    }
    if (key == 'd' && keyValid[2] == true) {
        keys[2] = true;
        keyValid[2] = false;
    }
}

 public void keyReleased() {
    if (key == 'a') {
        keys[0] = false;
        keyValid[0] = true;
    }
    
    if (key == 's') {
        keys[1] = false;
        keyValid[1] = true; 
        
    } 
    if (key == 'd') {
        keys[2] = false;
        keyValid[2] = true;
    }
}

 public void mousePressed() {    
    if (mouseButton ==  LEFT)
        keys[3] = true;
    if (mouseButton ==  RIGHT)
        keys[4] = true;
    
    if (windowNumber == 3) {
        windowNumber = 0;
        keys[3] = false;
    }
}

 public void disableKeys() {
    //Will disable the keys, after you press it will automaticly disable making you press only one time.
    if (keys[3])
        keys[3] = false;
    
    if (keys[4])
        keys[4] = false;
    
    if (keys[0]) {
        keys[0] = false;
    }
    
    if (keys[1]) {
        keys[1] = false;
    }
    
    if (keys[2]) {
        keys[2] = false;
    }
}


// Global Function  

//in case you are playing in a different resolution it will automatically set all the scales according to your resolution, even in fullscreen!
 public float resizeX(float value) {
    float newValue = (width * value) / 1920;
    return newValue;
}

 public float resizeY(float value) {
    float newValue = (height * value) / 1080;
    return newValue;
}

 public int secondsToFrames(int value) {
    int frames = value * 60;
    return frames;
}
class Button {
    //Variables
    
    float posX, posY;
    int wScale, hScale;
    String text;
    boolean mouseInside;
    
    PImage buttonImg, buttonPressedImg;
    
    
    //Constructor
    
    // Button(PositionX,PositionY,Height,Width,Text)
    Button(float x, float y, float w, float h, String t) {
        posX = x;
        posY = y;
        wScale = round(w);
        hScale = round(h);
        text = t;
        
        buttonImg = loadImage("Images/Button.png");
        buttonImg.resize(wScale, hScale);
        buttonPressedImg = loadImage("Images/ButtonPressed.png");
        buttonPressedImg.resize(wScale, hScale);
    }
    
    
    //Functionality
    
     public void draws() {
        if (mouseX >= posX && mouseX <= posX + wScale && mouseY >= posY && mouseY <= posY + hScale) 
            mouseInside = true;
        else
            mouseInside = false;
        
        
        
        if (mouseInside) {
            image(buttonPressedImg, posX, posY);
            fill(255);
            textSize(resizeX(50));
            textAlign(CENTER, CENTER);
            text(text, posX + wScale / 2, posY + hScale / 2);
        } else {
            image(buttonImg, posX, posY);
            fill(0);
            textSize(resizeX(50));
            textAlign(CENTER, CENTER);
            text(text, posX + wScale / 2, posY + hScale / 2);
        }
    }
    
    
    //get Functions
    
     public boolean getIsPressed() {
        if (mouseInside && keys[3])
            return true;
        
        return false;
    }
}

class Level {
    //Variables
    int notesQuantity, level;
    int frameCount = 0;
    int fadeoutSec = 0;
    boolean[] played;
    boolean[] priority;
    Note[] notes;
    
    NotePlayer actionerL = new NotePlayer(resizeX(560),resizeY(810), resizeX(200), 'l');
    NotePlayer actionerM = new NotePlayer(resizeX(860),resizeY(810), resizeX(200), 'm');
    NotePlayer actionerR = new NotePlayer(resizeX(1160),resizeY(810), resizeX(200), 'r');
    NotePlayer bad = new NotePlayer(resizeX(560),resizeY(810), resizeX(200), 'l');
    NotePlayer good = new NotePlayer(resizeX(560),resizeY(810), resizeX(200), 'l');
    NotePlayer perfect = new NotePlayer(resizeX(560),resizeY(810), resizeX(200), 'l');
    
    //Constructor
    Level(int notesQuantity, int level) {
        this.notesQuantity = notesQuantity;
        this.level = level;
        notes = new Note[notesQuantity];
        
        played = new boolean[notesQuantity];
        for (int i = 0; i < played.length; i++) {
            played[i] = false;
        }
        
        priority = new boolean[notesQuantity];
        for (int i = 0; i < priority.length; i++) {
            priority[i] = false;
        }
        
        priority[0] = true;
    } 
    
    //Functionality
     public void plays() {
        buttons[17].draws();
        if (buttons[17].getIsPressed()) {
            levelNumber = 0;
            windowNumber = 0;
            createLevels();
        }
        actionerL.draws();
        actionerM.draws();
        actionerR.draws();
        //bad.draws();
        //good.draws();
        //perfect.draws();
        
        switch(level) {
            case 0:
                level1();
        }
        frameCount++;
    }
    
    // Create Level
     public void level1() {
        // Notes Sheet
        playSong(beneathTheMask, 0.2f, 2, 5); // playSong(songName,volume,startTime,endTime) 96
        drawNote(0, 0, 2, 0); // drawNote(position, second, speed, noteNum)
        drawNote(1, 1, 2, 1); 
        drawNote(2, 2, 2, 2);
    }
    
     public void drawNote(int rml, int spawnSecond, float speed, int notePos) {
        if (!played[notePos]) { // If not been played.
            int x = 0;
            switch(rml) {
                case 0:
                    x = 575;
                    break;	
                case 1:
                    x = 960;
                    break;	
                case 2:
                    x = 1150;
                    break;	
            }
            if (frameCount >= secondsToFrames(spawnSecond)) { // Conditional for spawn time.
                notes[notePos] = new Note(resizeX(x),resizeY(270 + (frameCount - secondsToFrames(spawnSecond)) * speed),resizeX(200),rml);
                if (priority[notePos]) {
                    scoreNotation(notes[notePos], rml, notePos);
                }
                notes[notePos].draws();
                //!keys[0] && keyValid[0] // Se activa cuando se esta presionando.
            }
        }
    }
    
     public void playSong(SoundFile song, float volume, int timeStart, int timeEnd) {
        if (frameCount >= secondsToFrames(timeStart) && frameCount < secondsToFrames(timeEnd)) {
            if (!song.isPlaying()) {
                song.stop();
                s.volume(volume);
                song.play();
            }
        } 
        if (frameCount == secondsToFrames(timeEnd + fadeoutSec) && volume - (volume / 10) * fadeoutSec > 0.0f) {
            s.volume(volume - (volume / 10) * fadeoutSec);
            fadeoutSec++;
            System.out.println(volume - (volume / 10) * fadeoutSec);
        }
        if (volume <= 0.0f) {
            s.volume(0);
            song.stop();
            levelCompleted();
            System.out.println(score);
        }
    }
    
     public void scoreNotation(Note note, int keyPos, int arrayPos) {
        if (note.getPosY() <= resizeY(610) && keys[keyPos] || otherKeyPressed(keyPos) || note.getPosY() >= resizeY(980)) {
            System.out.println("Bad!");
            System.out.println(note.getPosY());
            priority[arrayPos] = false;
            priority[arrayPos + 1] = true;
            played[arrayPos] = true;
            disableKeys();
        } else if (note.getPosY() >= resizeY(611) && keys[keyPos] && note.getPosY() <= resizeY(729)) {
            System.out.println("Good!");
            System.out.println(note.getPosY());
            priority[arrayPos] = false;
            priority[arrayPos + 1] = true;
            played[arrayPos] = true;
            score += 100;
            disableKeys();
        } else if (note.getPosY() >= resizeY(730) && keys[keyPos] && note.getPosY() <= resizeY(765)) {
            System.out.println("Perfect!");
            System.out.println(note.getPosY());
            priority[arrayPos] = false;
            priority[arrayPos + 1] = true;
            played[arrayPos] = true;
            score += 200;
            disableKeys();
        }
    }
    
     public boolean otherKeyPressed(int keyPos) {
        switch(keyPos) {
            case 0:
                if (keys[1] || keys[2]) {
                    return true;
                }
                break;
            case 1:
                if (keys[0] || keys[2]) {
                    return true;
                }
                break;	
            case 2:
                if (keys[1] || keys[0]) {
                    return true;
                }
                break;	
        }
        return false;
    }
}
class Note {
    // Variables
    float posX, posY;
    int size, hScale, pos;
    PImage noteImg;
    
    // Constructor
    Note(float x, float y, float s, int p) {
        posX = x;
        posY = y;
        size = round(s);
        pos = p;
        
        switch(pos) {
            case 0:
                noteImg = loadImage("Images/NoteLeft.png");
                noteImg.resize(size, size);
                break;
            case 1:
                noteImg = loadImage("Images/NoteMiddle.png");
                noteImg.resize(size, size);
                break;
            case 2:
                noteImg = loadImage("Images/NoteRight.png");
                noteImg.resize(size, size);
                break;
        }
    }
    
    
    // Functionality
    
     public void draws() {
        image(noteImg, posX, posY);
        fill(255);
    }
    
     public float getPosX() {
        return posX;
    }
    
     public float getPosY() {
        return posY;
    }
    
     public float getScaleW() {
        return size;
    }
    
     public float getScaleH() {
        return hScale;
    }
    
     public void setPosXY(float x, float y) {
        posX = x;
        posY = y;
    }
}
class NotePlayer {
    //Variables
    
    float posX, posY;
    int size, keyPos;
    
    PImage notePlayerUnpressed, notePlayerPressed;
    
    
    //Constructor
    
    // NotePlayer(PositionX, PositionY, Size, ChartPosition)
    NotePlayer(float x, float y, float s, char pos) {
        posX = x;
        posY = y;
        size = round(s);
        
        
        switch(pos) {
            case 'l' :
                keyPos = 0;
                notePlayerUnpressed = loadImage("Images/RedNotePlayerUnpressed.png");
                notePlayerUnpressed.resize(size, size);
                notePlayerPressed = loadImage("Images/RedNotePlayerPressed.png");
                notePlayerPressed.resize(size, size);
                break;	
            case 'm' :
                keyPos = 1;
                notePlayerUnpressed = loadImage("Images/YellowNotePlayerUnpressed.png");
                notePlayerUnpressed.resize(size, size);
                notePlayerPressed = loadImage("Images/YellowNotePlayerPressed.png");
                notePlayerPressed.resize(size, size);
                break;	
            case 'r' :
                keyPos = 2;
                notePlayerUnpressed = loadImage("Images/BlueNotePlayerUnpressed.png");
                notePlayerUnpressed.resize(size, size);
                notePlayerPressed = loadImage("Images/BlueNotePlayerPressed.png");
                notePlayerPressed.resize(size, size);
                break;	
        }   
    }
    
    
    //Functionality
    
     public void draws() {
        if (!keyValid[keyPos]) {
            image(notePlayerPressed, posX, posY);
            fill(255);
        } else {
            image(notePlayerUnpressed, posX, posY);
            fill(255,100,100);
        }
    }
}


//Everything inside this is dedicated to draw the windows and other functionality

// Variables
PImage menuImg;
PImage levelSelectionImg;
PImage levelCompletedImg;
PImage helpImg;

SoundFile menuMusic, beneathTheMask, mirrorTemple, sweden, s_button;
Sound s = new Sound(this);

// Create/Load Functions
 public void createButtons() {
    buttons = new Button[20];
    buttons[0] = new Button(width / 2 - resizeX(800), height - resizeY(250), resizeX(400), resizeY(80), "Main Menu");
    buttons[1] = new Button(resizeX(760), resizeY(630), resizeX(380), resizeY(120), "Play"); // Open Song Selector Button
    buttons[2] = new Button(resizeX(760), resizeY(770), resizeX(380), resizeY(120), "Help"); // Instructions Screen Button
    buttons[3] = new Button(resizeX(760), resizeY(910), resizeX(380), resizeY(120), "Exit"); // Close Game Button
    buttons[4] = new Button(resizeX(200), height - resizeY(250), resizeX(650), resizeY(160), "Back"); // Return Button
    buttons[5] = new Button(resizeX(200), resizeY(650), resizeX(400), resizeY(80), "Play again"); // Retry Song Button
    
    // Song Selection Buttons.
    buttons[6] = new Button(resizeX(200), resizeY(300), resizeX(250), resizeY(80), "Beneath the Mask - Lyn"); // Behind the Mask Button
    buttons[7] = new Button(resizeX(200), resizeY(400), resizeX(250), resizeY(80), "Mirror Temple (Remix) - 2 Mello"); // Out of Touch Button
    buttons[8] = new Button(resizeX(200), resizeY(500), resizeX(250), resizeY(80), "Sweden - C418"); // Sweden Song Button
    
    
    buttons[17] = new Button(width - resizeX(500), resizeY(850), resizeX(400), resizeY(150), "Main Menu"); // Results Main Menu Button
    buttons[18] = new Button(0, resizeY(50), resizeX(150), resizeY(65), "Pause"); // Pause Button
}

 public void createLevels() {
    levels = new Level[3];
    levels[0] = new Level(5, 0);
    levels[1] = new Level(5, 1);
    levels[2] = new Level(5, 2);
}

 public void loadImages() {
    menuImg = loadImage("Images/MainMenu.png");
    menuImg.resize(width, height);
    
    levelSelectionImg = loadImage("Images/LevelSelection.png");
    levelSelectionImg.resize(width, height);
    
    levelCompletedImg = loadImage("Images/LevelCompleted.png");
    levelCompletedImg.resize(width, height);
    
    helpImg = loadImage("Images/Help.png");
    helpImg.resize(width, height);
}

 public void loadAudio() {
    menuMusic = new SoundFile(this, sketchPath("Sounds/MainMenu.wav"));
    beneathTheMask = new SoundFile(this, sketchPath("Sounds/BeneathTheMask.wav"));
    mirrorTemple = new SoundFile(this, sketchPath("Sounds/MirrorTemple.wav"));
    sweden = new SoundFile(this, sketchPath("Sounds/Sweden.wav"));
    s_button = new SoundFile(this, sketchPath("Sounds/ButtonEffect.wav"));
}

 public void menuMusicSystem() {
    if (!menuMusic.isPlaying() && windowNumber == 0) {
        menuMusic.stop();
        s.volume(1);
        menuMusic.play();
    } else if (!menuMusic.isPlaying() && windowNumber >= 2) {
        menuMusic.stop();
        menuMusic.play();
    }
    if (menuMusic.isPlaying() && windowNumber == 1) {
        menuMusic.stop();
    }
    
    
    if (!mirrorTemple.isPlaying() && windowNumber == 1 && levelNumber == 1) {
        mirrorTemple.stop();
        mirrorTemple.play();
    }
    if (!sweden.isPlaying() && windowNumber == 1 && levelNumber == 2) {
        sweden.stop();
        sweden.play();
    }
    if (windowNumber == 0) {
        beneathTheMask.stop();
        sweden.stop();
        mirrorTemple.stop();
    }
}
// Windows Functions
 public void menu() {
    image(menuImg, 0, 0);
    
    buttons[1].draws();
    if (buttons[1].getIsPressed()) {
        windowNumber = 2;
        s_button.play();
    }  
    
    buttons[2].draws();
    if (buttons[2].getIsPressed()) {
        windowNumber = 3;
        s_button.play();
    }  
    
    buttons[3].draws();
    if (buttons[3].getIsPressed()) {
        exit();
    }
}

 public void chooseLevel() {
    image(levelSelectionImg, 0, 0);
    
    buttons[4].draws();
    if (buttons[4].getIsPressed()) {
        windowNumber = 0;
        s_button.play();
    }
    
    buttons[6].draws();
    if (buttons[6].getIsPressed()) {
        levelNumber = 0;
        windowNumber = 1;
        score = 0;
        s_button.play();
    }
    buttons[7].draws();
    if (buttons[7].getIsPressed()) {
        levelNumber = 1;
        windowNumber = 1;
        score = 0;
        s_button.play();
    }
    buttons[8].draws();
    if (buttons[8].getIsPressed()) {
        levelNumber = 2;
        windowNumber = 1;
        score = 0;
        s_button.play();
    }
}

 public void help() {
    image(helpImg, 0, 0);
}

 public void levelCompleted() {
    image(levelCompletedImg, 0, 0);
    
    buttons[17].draws();
    if (buttons[17].getIsPressed()) {
        levelNumber = 0;
        windowNumber = 0;
    }
}


// HEAD - UP DISPLAY
//hud means head-up display, it is basically the interface that shows when you are playing, like the number of bullets you have, it shows information while in - game.
 public void hud() {
    
    buttons[18].draws();
    if (buttons[18].getIsPressed()) {
        levelNumber = 0;
        windowNumber = 0;
    }
    
}


  public void settings() { size(800, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Game" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
